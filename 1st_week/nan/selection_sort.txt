선택정렬

- 제자리 정렬(in-place sorting) 알고리즘의 하나
  : 추가적인 메모리를 요구하지 않고 입력 배열만을 이용하여 정렬이 가능하다.

- 과정
  1. 배열에서 최소값을 찾아 맨 앞에 있는 값과 교체
     배열에서의 첫번째 원소를 나머지 원소와 비교하여 최소값을 찾는 방법.
  2. 남은 배열에서 1을 반복.

- 특징
  1. 자료의 이동 횟수가 정해져있다.
  2. 안정성을 만족하지 않는다.
     => 값이 같은 레코드가 있는 경우에 상대적인 위치가 변경될 수 있다.
     Ex)
     Input: 3(1),3(2),2,1// 괄호 안의 숫자는 같은 레코드에서 순서를 의미
     1회차: 1,3(2),2,3(1) => 이걸 안정성이라고 의미하는 건가..
     2회차: 1,2,3(1),3(2)

- 시간 복잡도
  - 비교 횟수
    : 배열에서의 데이터의 크기 비교 횟수
    - 두개의 for 루프의 실행 횟수
    - 외부 루프: (n-1)번
    - 내부 루프: {(n-1) + (n-2) + ... + 2 + 1}번
  - 교환 횟수
    : 배열에서의 데이터의 교환 횟수. tmp value를 이용한 swapping
    - 3(n-1)번
  - T(n) = (n-1) + (n-2) + ... + 2 + 1 = n(n-1)/2 = O(n^2)
    => T(n): 사이즈가 n인 문제를 푸는 데 걸리는 시간.
    => O(n): 사이즈가 n인 알고리즘을 수행하는 데 걸리는 시간.
             문제의 사이즈가 커질수록, 최고 차항의 차수가 결과에 가장
             많은 영향을 미친다. 따라서 시간 복잡도에 가장 큰 영향을
             미치는 차항으로 시간복잡도를 나타내는 것을 Big-O 표기법
             (Big-O Notation)이라고 하며, O(f(n))과 같이 표기한다.
- 결과
  구현은 간단하나 비효율적이다. 이에 비해 퀵정렬, 힙정렬, 합병정렬,
  기수정렬은 효율적이라 할 수 있다.
