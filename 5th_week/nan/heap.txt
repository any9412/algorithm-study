힙

- 우선순위 큐를 위하여 만들어진 자료구조.
- 배열을 이용하여 힙을 구현할 수 있다.
- 힙의 삽입과 삭제를 이해한다.

우선순위 큐: 우선순위의 개념을 큐에 도입한 자료구조
 - 데이터들이 우선순위를 가지고 있고, 우선순위가 높은 데이터가 먼저 나간다.
 - 비교
   - 스택       : 가장 최근에 들어온게 먼저 나감.
   - 큐         : 가장 처음에 들어온게 먼저 나감.
   - 우선순위 큐: 가장 우선순위가 높은게 먼저 나감.
 - 이용사례
   - 시뮬레이션 시스템
   - 네트워크 트래픽 제어
   - 운영체제에서의 작업 스케줄링
   - 수치 해석적인 계산
 - 우선순위 큐는 배열, 연결리스트, 힙으로 구현 가능
   - 비교
     - 순서 없는 배열       : 삽입 - O(1), 삭제 - O(n)
     - 순성 없는 연결리스트 : 삽입 - O(1), 삭제 - O(n)
     - 정렬된 배열          : 삽입 - O(n), 삭제 - O(1)
     - 정렬된 연결리스트    : 삽입 - O(n), 삭제 - O(1)
     - 힙                   : 삽입 - O(logn), 삭제 - O(logn)
     => 힙이 가장 효율적임을 알 수 있다.

힙: 완전 이진 트리의 일종.
- 여러 개의 값들 중에서 최대값이나 최소값을 빠르게 찾아내도록 만들어진 자료구조.
  => 최대/최소값 구할 때는 힙을 이용해보자!
- 일종의 반정렬 상태(느슨한 정렬 상태)를 유지
  - 큰 값이 상위 레벨에 있고 작은 값이 하위 레벨에 있음.
  - 부모 노드의 키 값이 자식 노드의 키 값보다 항ㅇ상 큰/작은 이진 트리
    => 자식 간의 크기는 상관이 없는 듯.
- 중복된 값 허용.
  * 이진 탐색 트리에서는 중복된 값을 허용하지 않음.

힙 종류
- 최대 힙(max heap): 부모 노드의 키 값이 자식 노드의 키 값보다 크거나 같은 완전 이진 트리.
- 최소 힙(min heap): 부모 노드의 키 값이 자식 노드의 키 값보다 작거나 같은 완전 이진 트리.

힙의 구현
- 배열을 사용.
- 구현의 편의성을 위해 첫번째 인덱스인 0은 사용되지 않음.
- 특정 위치의 노드 번호는 새로운 노드가 추가되어도 변하지 않는다.
  => 새로운 노드가 추가될때 키 값은 바뀌더라도 노드 번호는 바뀌지 않는다는 의미인가 봄..
- 입에서의 부모 노드와 자식 노드의 관계(index)
  - left = parent * 2
  - right = parent *2 + 1
  - parent = child / 2
- 힙의 삽입
  - 마지막 노드에 추가.
  - 부모와 비교를 하며 힙 재구성.
- 힙의 삭제
  - 마지막 노드를 루트 노드로 변경.
  - 왼쪽 자식과 비교하며 힙 재구성.
