1. 그래프(Graph)
- 정점(vertex)이라고 불리는 노드들의 집합 V와 간선(edge)이라고 불리는 정점들의 쌍의 집합 E로 이루어진 쌍(V,E)

2. 용어
- 정점 : 위치라는 개념 (node)
- 간선 : 위치 간의 관계. 즉, 노드를 연결하는 선
- 인접 정점(adjacent vertex) : 간선에 의해 직접 연결된 정점
- 방향 간선(directed edge) : 순서가 정해진 정점의 쌍(u,v)
- 무방향 간선(undirected edge) : 순서가 정해지지 않은 정점의 쌍(u,v)
- 자기 루프(self loop) : 정점 자신을 연결하는 간선
- 정점의 차수(degree) : 그 점에 부속된 간선의 개수
- 진입 차수(in-degree) : 외부에서 오는 간선의 수
- 진출 차수(out-degree) : 외부로 향하는 간선의 수
- 경로 길이(path length) : 경로를 구성하는데 사용된 간선의 수
- 경로(path) : 인접한 정점들의 순열(sequence)
- 단순 경로(simple path) : 경로 중 반복되는 정점이 없는 경우
- 사이클(cycle) : 단순 경로의 시작 정점과 종료 정점이 동일한 경우
- 트리 : 사이틀이 없는(acyclic) 연결된 그래프
- 병렬(parallel) : 두 간선이 같은 정점 쌍을 연결하는 경우
- 숲(forest) : 트리들의 분리 집합
- 희소 그래프(sparse graph) : 간선이 상대적으로 적은 그래프
- 조밀 그래프(dense graph) : 없는 간선이 상대적으로 적은 그래프

3. 그래프의 종류
(1) 방향 그래프
- 모든 간선들이 방향 간선이다.
- 간선은 <A,B>로 표시하며, <A,B>와 <B,A>는 다른 간선이다.
- 예: 네트워크의 라우트
(2) 무방향 그래프
- 모든 간선들이 무방향 간선이다.
- 간선은 (A,B)로 표시하며, (A,B)와 (B,A)는 같은 간선이다.
- 예: 항공 노선도
(3) 사이클이 없는 방향 그래프(directed asyclic graph, DAG)
- 방향 그래프에 사이클이 없는 경우
(4) 이분 그래프(bipartite graph)
- 정점들이 두 집합으로 나뉘고 모든 간선들이 한 집합의 정점들과 다른 집합의 정점들을 연결하는 그래프
(5) 가중치 그래프(weighted graph)
- 정수들(가중치)이 각 간선에 할당된 그래프 (거리 혹은 비용의 개념이다.)
(6) 완전 그래프(complete graph)
- 모든 간선이 존재하는 그래프

4. 그래프의 표현
(1) 인접 행렬
- 그래프가 조밀할 때 유용하다.
(2) 인접 리스트
- 연결 리스트의 총 개수는 그래프의 정점의 개수와 같다.
- 정점의 순서를 결정하기 때문에, 입력되는 간선의 순서가 중요하다.
- 희소 그래프인 경우 유리하다.
(3) 인접 집합
- 인접 리스트와 유사하나, 연결 리스트 대신 분리집합을 사용한다.
- 조밀 그래프인 경우 유리하다.

5. 그래프 표현들의 비교
표현		공간	v와 w 사이의 간선 유무	v에 종속된 간선 찾기
--------------------------------------------------------------------------
간선의 리스트	E	E			E
인접 행렬	V²	1			V
인접 리스트	E+V	Degree(v)		Degree(v)
인접 집합	E+V	log(Degree(v))		Degree(v)

6. 그래프 탐색
- 그래프 탐색 알고리즘=그래프 검색 알고리즘
(1) 깊이 우선 검색(depth first search, DFS)
- 스택을 사용한다.
- 루트 노드(혹은 다음 임의의 노드)에서 시작해 다음 분기로 넘어가기 전에 해당 분기를 완벽하게 탐색하는 방법이다.
- 모든 노드를 방문하고자 할 때 사용한다.
(2) 너비 우선 검색(breadth first search, BFS)
- 루트 노드(혹은 다음 임의의 노드)에서 시작해 인접한 노드를 먼저 탐색하는 방법이다.
- 두 노드 사이의 최단 경로 혹은 임의의 경로를 찾고 싶을 때 사용한다.

6. 참고
- 다양한 예제로 학습하는 데이터 구조와 알고리즘
- [자료구조] 그래프(Graph)란 (https://gmlwjd9405.github.io/2018/08/13/data-structure-graph.html)
