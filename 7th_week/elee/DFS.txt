1. 깊이 우선 탐색(DFS, Depth-First Search)
- 루트 노드에서 시작해 다음 분기로 넘어가기 전 해당 분기를 완벽하게 탐색하는 방법
- 재귀 알고리즘 사용
- 트리의 전위 검색과 유사하게 동작. 스택을 사용한다.

2. 장점
- 너비 우선 탐색(BFS)에 비해 간단하다. (메모리를 적게 사용한다.)

3. 단점
- 단순 검색 속도는 너비 우선 탐색(BFS)보다 느리다.
- 노드의 방문 여부를 검사하지 않을 경우, 무한루프에 빠질 수 있다.

4. 알고리즘
(1) 정점 u부터 다른 정점으로 향하며 간선들을 검사한다.
(2-1) 간선이 이미 방문한 정점에 연결되어 있다면, 현재 정점 u로 되돌아온다.
(2-2) 간선이 방문하지 않은 정점에 연결되어 있다면, 그 정점으로 이동하여 그 정점부터 다시 처리를 시작한다. (새 정점=현재 정점)
(3) 이 과정을 막다른 곳에 다다를 때까지 반복한다.
(4) 백트래킹이 시작되고, 최초 백트래킹을 시작한 정점에 닿을 때 종료된다. (모든 노드를 방문)

5. 적용 사례들
- 위상 정렬(Topological Sorting)
- 연결된 구성 요소 찾기
- 그래프의 단절점(Articulation Point) 찾기
- 강하게 연결된 구성 요소 찾기
- 미로와 같은 퍼즐 풀기

6. 시간 복잡도
인접 리스트로 표현	O(V+E)
인접 행렬로 표현	O(V^2)

7. 참고
- 다양한 예제로 학습하는 데이터 구조와 알고리즘
- [알고리즘] 깊이 우선 탐색(DFS)이란
(https://gmlwjd9405.github.io/2018/08/14/algorithm-dfs.html)
