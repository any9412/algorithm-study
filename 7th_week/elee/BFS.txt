1. 너비 우선 탐색(BFS, Breadth-First Search)
- 루트 노드에서 시작해서 인접한 노드를 먼저 탐색하는 방법
- 트리의 레벨 순서 탐색과 비슷하게 동작한다. 큐를 사용한다.
- 최단, 혹은 임의의 경로를 찾을 때 사용한다.
- 재귀적으로 동작하지 않는다.
- 근접 레벨부터 하나씩 접근한다.
- 찾는 데이터가 얕은 깊이에 있을 때 효율적이다.

2. 단점
- 단순 검색 속도는 너비 우선 탐색(BFS)보다 느리다.
- 노드의 방문 여부를 검사하지 않을 경우, 무한루프에 빠질 수 있다.

3. 알고리즘
(1) 레벨 1의 모든 정점을 방문한다.
(2) 두 번째 레벨의 모든 정점을 방문한다. 이 정점은 모두 레벨 1의 정점과 인접되어 있다.
(3) 그래프의 모든 레벨을 완료할 때까지 반복한다.

4. 적용 사례들
- 그래프에서 연결된 모든 구성 요소 찾기
- 하나의 연결된 구성 요소 안의 모든 노드 찾기
- 그래프가 이분 그래프인지 검사하기

5. 시간 복잡도
인접 리스트로 표현	O(V+E)
인접 행렬로 표현	O(V^2)

6. 참고
- 다양한 예제로 학습하는 데이터 구조와 알고리즘
- [알고리즘] 깊이 우선 탐색(BFS)이란
(https://gmlwjd9405.github.io/2018/08/14/algorithm-bfs.html)
