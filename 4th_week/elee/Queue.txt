1. 큐(Queue)
- 데이터를 저장하는 데이터 구조
- 데이터의 삽입이 한쪽 끝(뒤, rear)에서 이루어지고 삭제는 다른 쪽 끝(앞, front)에서 이루어지는 정렬된 리스트
- 가장 처음 삽입된 항목이 맨 먼저 삭제된다.
- 선입선출(First In First Out, FIFO)나 후입후출(Last In Last Out, LILO) 리스트라고 불린다.

2. 큐가 가지는 변화
(1) 인큐(EnQueue) : 큐에 항목이 삽입되는 것
(2) 디큐(DeQueue) : 항목이 큐로부터 삭제되는 것
(3) 언더플로우(Underflow) : 빈 큐에서 디큐하려고 하는 것
(4) 오버플로우(Overflow) : 가득 찬 큐에 인큐하려고 하는 것
※ 언더플로우와 오버플로우는 일반적으로 예외처리를 한다.

3. 적용 사례
- (우선순위가 같은) 시스템 예약 작업을 도착 순서대로 처리하기 (예: 프린트 큐)
- 매표소의 줄 등 먼저 온 순서대로 서비스 시뮬레이션
- 멀티 프로그래밍
- 비동기적 데이터 전송(파일 입출력, 파이프, 소켓)

4. 구현
- 간단한 원형 배열에 기반한 구현 → 단순 배열의 경우, 여러 번의 인큐/디큐 이후 배열 앞 공간이 낭비된다. 이를 마지막 항목과 첫 번째 항목이 연결되는 원형 배열로 해결할 수 있다. 큐의 최대 크기가 미리 정해져 바뀌지 않는다. 오버플로우 예외가 발생할 수 있다.
- 동적 원형 배열에 기반한 구현
- 연결 리스트 구현

5. 참고
- 다양한 예제로 학습하는 데이터 구조와 알고리즘