1. 쉘 정렬(Shell Sort)
- 증분 감소 정렬(Diminishing Increment Sort)라고도 불린다.
- 거의 정렬된 입력에서 효율적으로 동작한다.
- 삽입 정렬을 보완한 알고리즘이다.
- 입력 리스트에 대해 여러 개의 수행 단계를 만들고 크기가 같은 집합 여러 개를 삽입 정렬를 사용해 정렬한다.
- 값을 목적지로 빠르게 이동시켜 삽입 정렬의 효율성을 개선한다.
- 증분 수열의 선택에 따라 수행 시간이 결정된다.

2. 장점
- O(n^2) 알고리즘 중에서가장 빠르다.
- 상대적으로 구현이 쉽다.

3. 단점
- 복잡한 구조에서 병합, 힙, 퀵 정렬만큼 효율적이지 못하다.

4. 알고리즘
(1) 정렬해야 할 리스트의 각 k번째 요소를 추출해서 부분 리스트를 만든다. (k = 리스트 크기/2)
(2) 각 회전마다 간격 k를 절반으로 줄인다. (이때, k는 홀수가 좋다.)
(3) k가 1이 될 때까지 반복한다.

5. 코드
/*Shell Sort*/
// 간격만큼 떨어진 요소들을 삽입 정렬
void inc_insertion_sort(int list[], int first, int last, int gap){
  int i, j, key;
  for(i=first+gap; i<=last; i=i+gap){
    key = list[i];

    for(j=i-gap; j>=first && list[j]>key; j=j-gap){
      list[j+gap] = list[j];
    }

    list[j+gap] = key;
  }
}

// 쉘 정렬
void shell_sort(int list[], int n){
  int i, gap;
  for(gap=n/2; gap>0; gap=gap/2){
    if((gap%2) == 0)(
      gap++;
    )

    for(i=0; i<gap; i++){
      inc_insertion_sort(list, i, n-1, gap);
    }
  }
}

6. 시간 복잡도
Worst	O(n^2)
Best	O(n)
Avg	O(n^1.5)

7. 참고
- 다양한 예제로 학습하는 데이터 구조와 알고리즘
- [알고리즘] 셸 정렬(shell sort)이란 (https://gmlwjd9405.github.io/2018/05/08/algorithm-shell-sort.html)